{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DbDOy5nO3DVC",
        "outputId": "d3af3599-38e0-4dfd-8876-c1f8722557cd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "Mounted at /content/gdrive\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "cd = os.getcwd()\n",
        "print(cd)\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "static = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/SPH6004/TeamShare/RawData/static.csv')\n",
        "\n",
        "dynamic = pd.read_csv('/content/gdrive/MyDrive/Colab Notebooks/SPH6004/TeamShare/RawData/dynamic.csv')\n"
      ],
      "metadata": {
        "id": "Ep0oY_CB3HUw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dynamic.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 308
        },
        "id": "IbD7bmw26aDk",
        "outputId": "f8c6b901-7366-40b3-9231-577bc29459b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id      charttime  albumin  globulin  total_protein  aniongap  \\\n",
              "0  28793466   4/12/29 3:35      NaN       NaN            NaN      16.0   \n",
              "1  25611175  11/29/40 3:50      NaN       NaN            NaN      15.0   \n",
              "2  26115624    9/7/50 0:22      3.5       NaN            NaN      12.0   \n",
              "3  28164589   3/11/59 1:11      NaN       NaN            NaN      12.0   \n",
              "4  26115624   9/1/50 20:14      NaN       NaN            NaN       NaN   \n",
              "\n",
              "   bicarbonate   bun  calcium  chloride  ...  sodium_bg  lactate_bg  \\\n",
              "0         21.0  12.0      8.8     106.0  ...        NaN         NaN   \n",
              "1         27.0  28.0      8.5     101.0  ...        NaN         NaN   \n",
              "2         22.0   9.0      7.9     111.0  ...        NaN         NaN   \n",
              "3         34.0  58.0      8.3     103.0  ...        NaN         NaN   \n",
              "4          NaN  11.0      7.8       NaN  ...        NaN         NaN   \n",
              "\n",
              "   glucose_bg  d_dimer  fibrinogen  thrombin  inr    pt   ptt  urineoutput  \n",
              "0         NaN      NaN         NaN       NaN  1.0  10.9  27.8          NaN  \n",
              "1         NaN      NaN         NaN       NaN  NaN   NaN   NaN          NaN  \n",
              "2         NaN      NaN         NaN       NaN  1.2  13.9  25.8          NaN  \n",
              "3         NaN      NaN         NaN       NaN  3.8  41.7  40.2          NaN  \n",
              "4         NaN      NaN         NaN       NaN  NaN   NaN   NaN          NaN  \n",
              "\n",
              "[5 rows x 70 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36b22e36-8fae-4fc6-a55c-e849dcf6e8ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>charttime</th>\n",
              "      <th>albumin</th>\n",
              "      <th>globulin</th>\n",
              "      <th>total_protein</th>\n",
              "      <th>aniongap</th>\n",
              "      <th>bicarbonate</th>\n",
              "      <th>bun</th>\n",
              "      <th>calcium</th>\n",
              "      <th>chloride</th>\n",
              "      <th>...</th>\n",
              "      <th>sodium_bg</th>\n",
              "      <th>lactate_bg</th>\n",
              "      <th>glucose_bg</th>\n",
              "      <th>d_dimer</th>\n",
              "      <th>fibrinogen</th>\n",
              "      <th>thrombin</th>\n",
              "      <th>inr</th>\n",
              "      <th>pt</th>\n",
              "      <th>ptt</th>\n",
              "      <th>urineoutput</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>28793466</td>\n",
              "      <td>4/12/29 3:35</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>8.8</td>\n",
              "      <td>106.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>10.9</td>\n",
              "      <td>27.8</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25611175</td>\n",
              "      <td>11/29/40 3:50</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15.0</td>\n",
              "      <td>27.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>8.5</td>\n",
              "      <td>101.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>26115624</td>\n",
              "      <td>9/7/50 0:22</td>\n",
              "      <td>3.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.9</td>\n",
              "      <td>111.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.2</td>\n",
              "      <td>13.9</td>\n",
              "      <td>25.8</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>28164589</td>\n",
              "      <td>3/11/59 1:11</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>8.3</td>\n",
              "      <td>103.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.8</td>\n",
              "      <td>41.7</td>\n",
              "      <td>40.2</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>26115624</td>\n",
              "      <td>9/1/50 20:14</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.0</td>\n",
              "      <td>7.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 70 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36b22e36-8fae-4fc6-a55c-e849dcf6e8ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-36b22e36-8fae-4fc6-a55c-e849dcf6e8ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-36b22e36-8fae-4fc6-a55c-e849dcf6e8ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ae70385b-a182-4706-b361-e62276073e9d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae70385b-a182-4706-b361-e62276073e9d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ae70385b-a182-4706-b361-e62276073e9d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dynamic"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Processing static data"
      ],
      "metadata": {
        "id": "YK2X_ohh7ytP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "static.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "vLYsKg-v6i0H",
        "outputId": "2dd1fafe-77e2-4521-cab0-ba8d4e382b04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id hosp_admittime  hosp_dischtime     icu_intime     icu_outtime  \\\n",
              "0  24099382   6/11/11 7:15   6/18/11 21:45  6/11/11 14:31   6/13/11 18:05   \n",
              "1  27824879  9/30/28 20:55  10/10/28 15:54  9/30/28 20:58   10/5/28 18:39   \n",
              "2  27146619   9/20/41 0:34   9/22/41 12:05   9/20/41 7:13   9/21/41 18:10   \n",
              "3  22476441  10/8/73 16:46  10/16/73 13:05  10/8/73 18:28  10/10/73 13:26   \n",
              "4  23169158   3/12/27 1:19   3/19/27 13:15   3/12/27 2:43    3/15/27 1:53   \n",
              "\n",
              "   los_icu  icu_death gender                    race  admission_age  ...  \\\n",
              "0     2.15          0      M                   OTHER      58.441631  ...   \n",
              "1     4.90          0      F                   WHITE      79.748598  ...   \n",
              "2     1.46          0      F                   WHITE      81.717397  ...   \n",
              "3     1.79          0      F  BLACK/AFRICAN AMERICAN      63.769278  ...   \n",
              "4     2.97          0      F                   WHITE      84.191979  ...   \n",
              "\n",
              "   atrial_fibrillation  malignant_cancer chf ckd  cld  copd  diabetes  \\\n",
              "0                    0                 0   0   0    0     1         1   \n",
              "1                    0                 0   0   0    0     1         0   \n",
              "2                    0                 0   1   1    0     0         0   \n",
              "3                    0                 0   1   1    0     1         1   \n",
              "4                    1                 0   1   1    0     0         1   \n",
              "\n",
              "   hypertension  ihd  stroke  \n",
              "0             1    0       0  \n",
              "1             1    1       0  \n",
              "2             0    1       0  \n",
              "3             1    1       0  \n",
              "4             1    0       0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9652940d-d418-4085-acb2-57b48033d7ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>hosp_admittime</th>\n",
              "      <th>hosp_dischtime</th>\n",
              "      <th>icu_intime</th>\n",
              "      <th>icu_outtime</th>\n",
              "      <th>los_icu</th>\n",
              "      <th>icu_death</th>\n",
              "      <th>gender</th>\n",
              "      <th>race</th>\n",
              "      <th>admission_age</th>\n",
              "      <th>...</th>\n",
              "      <th>atrial_fibrillation</th>\n",
              "      <th>malignant_cancer</th>\n",
              "      <th>chf</th>\n",
              "      <th>ckd</th>\n",
              "      <th>cld</th>\n",
              "      <th>copd</th>\n",
              "      <th>diabetes</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>ihd</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24099382</td>\n",
              "      <td>6/11/11 7:15</td>\n",
              "      <td>6/18/11 21:45</td>\n",
              "      <td>6/11/11 14:31</td>\n",
              "      <td>6/13/11 18:05</td>\n",
              "      <td>2.15</td>\n",
              "      <td>0</td>\n",
              "      <td>M</td>\n",
              "      <td>OTHER</td>\n",
              "      <td>58.441631</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>27824879</td>\n",
              "      <td>9/30/28 20:55</td>\n",
              "      <td>10/10/28 15:54</td>\n",
              "      <td>9/30/28 20:58</td>\n",
              "      <td>10/5/28 18:39</td>\n",
              "      <td>4.90</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>79.748598</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>27146619</td>\n",
              "      <td>9/20/41 0:34</td>\n",
              "      <td>9/22/41 12:05</td>\n",
              "      <td>9/20/41 7:13</td>\n",
              "      <td>9/21/41 18:10</td>\n",
              "      <td>1.46</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>81.717397</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>22476441</td>\n",
              "      <td>10/8/73 16:46</td>\n",
              "      <td>10/16/73 13:05</td>\n",
              "      <td>10/8/73 18:28</td>\n",
              "      <td>10/10/73 13:26</td>\n",
              "      <td>1.79</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>BLACK/AFRICAN AMERICAN</td>\n",
              "      <td>63.769278</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23169158</td>\n",
              "      <td>3/12/27 1:19</td>\n",
              "      <td>3/19/27 13:15</td>\n",
              "      <td>3/12/27 2:43</td>\n",
              "      <td>3/15/27 1:53</td>\n",
              "      <td>2.97</td>\n",
              "      <td>0</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>84.191979</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9652940d-d418-4085-acb2-57b48033d7ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9652940d-d418-4085-acb2-57b48033d7ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9652940d-d418-4085-acb2-57b48033d7ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9338be6c-cf8b-4c4d-a8d5-1938f4a2571f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9338be6c-cf8b-4c4d-a8d5-1938f4a2571f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9338be6c-cf8b-4c4d-a8d5-1938f4a2571f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "static"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_ind = [0, *range(7, 25)]\n",
        "flat_features = static.iloc[:,feature_ind]\n",
        "flat_features.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "7IsuTI8q6xAF",
        "outputId": "ee520bb5-7fd4-4abb-a52a-49b8d20ac634"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id gender                    race  admission_age  weight_admit  \\\n",
              "0  24099382      M                   OTHER      58.441631          92.0   \n",
              "1  27824879      F                   WHITE      79.748598          55.0   \n",
              "2  27146619      F                   WHITE      81.717397          59.0   \n",
              "3  22476441      F  BLACK/AFRICAN AMERICAN      63.769278          73.6   \n",
              "4  23169158      F                   WHITE      84.191979          79.1   \n",
              "\n",
              "   height     admission_type  \\\n",
              "0   170.0           ELECTIVE   \n",
              "1     NaN           EW EMER.   \n",
              "2     NaN           EW EMER.   \n",
              "3   160.0           EW EMER.   \n",
              "4   160.0  OBSERVATION ADMIT   \n",
              "\n",
              "                                     first_careunit  charlson_score  \\\n",
              "0                               Trauma SICU (TSICU)              11   \n",
              "1                               Trauma SICU (TSICU)               5   \n",
              "2  Medical/Surgical Intensive Care Unit (MICU/SICU)               8   \n",
              "3  Medical/Surgical Intensive Care Unit (MICU/SICU)               8   \n",
              "4  Medical/Surgical Intensive Care Unit (MICU/SICU)               6   \n",
              "\n",
              "   atrial_fibrillation  malignant_cancer  chf  ckd  cld  copd  diabetes  \\\n",
              "0                    0                 0    0    0    0     1         1   \n",
              "1                    0                 0    0    0    0     1         0   \n",
              "2                    0                 0    1    1    0     0         0   \n",
              "3                    0                 0    1    1    0     1         1   \n",
              "4                    1                 0    1    1    0     0         1   \n",
              "\n",
              "   hypertension  ihd  stroke  \n",
              "0             1    0       0  \n",
              "1             1    1       0  \n",
              "2             0    1       0  \n",
              "3             1    1       0  \n",
              "4             1    0       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9c76af4f-d726-44a2-acc7-3f7bfbe50e1f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>race</th>\n",
              "      <th>admission_age</th>\n",
              "      <th>weight_admit</th>\n",
              "      <th>height</th>\n",
              "      <th>admission_type</th>\n",
              "      <th>first_careunit</th>\n",
              "      <th>charlson_score</th>\n",
              "      <th>atrial_fibrillation</th>\n",
              "      <th>malignant_cancer</th>\n",
              "      <th>chf</th>\n",
              "      <th>ckd</th>\n",
              "      <th>cld</th>\n",
              "      <th>copd</th>\n",
              "      <th>diabetes</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>ihd</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24099382</td>\n",
              "      <td>M</td>\n",
              "      <td>OTHER</td>\n",
              "      <td>58.441631</td>\n",
              "      <td>92.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>ELECTIVE</td>\n",
              "      <td>Trauma SICU (TSICU)</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>27824879</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>79.748598</td>\n",
              "      <td>55.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Trauma SICU (TSICU)</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>27146619</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>81.717397</td>\n",
              "      <td>59.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>22476441</td>\n",
              "      <td>F</td>\n",
              "      <td>BLACK/AFRICAN AMERICAN</td>\n",
              "      <td>63.769278</td>\n",
              "      <td>73.6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23169158</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>84.191979</td>\n",
              "      <td>79.1</td>\n",
              "      <td>160.0</td>\n",
              "      <td>OBSERVATION ADMIT</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c76af4f-d726-44a2-acc7-3f7bfbe50e1f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9c76af4f-d726-44a2-acc7-3f7bfbe50e1f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9c76af4f-d726-44a2-acc7-3f7bfbe50e1f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-abe10a74-3220-447d-91db-bbf148bf182f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-abe10a74-3220-447d-91db-bbf148bf182f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-abe10a74-3220-447d-91db-bbf148bf182f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "flat_features",
              "summary": "{\n  \"name\": \"flat_features\",\n  \"rows\": 20414,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2871873,\n        \"min\": 20001305,\n        \"max\": 29999625,\n        \"num_unique_values\": 20414,\n        \"samples\": [\n          21796125,\n          21921090,\n          28383836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"HISPANIC/LATINO - MEXICAN\",\n          \"HISPANIC OR LATINO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"admission_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.588894601370207,\n        \"min\": 18.00952755,\n        \"max\": 100.0584215,\n        \"num_unique_values\": 20404,\n        \"samples\": [\n          72.74748006,\n          69.42033965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight_admit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.316987057716904,\n        \"min\": 1.0,\n        \"max\": 1010.0,\n        \"num_unique_values\": 1351,\n        \"samples\": [\n          97.8,\n          63.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.813323969850883,\n        \"min\": 122.0,\n        \"max\": 208.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          175.0,\n          166.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"admission_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"EW EMER.\",\n          \"DIRECT EMER.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"first_careunit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Neuro Stepdown\",\n          \"Medical/Surgical Intensive Care Unit (MICU/SICU)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charlson_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 19,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          11,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atrial_fibrillation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"malignant_cancer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ckd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cld\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ihd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "static.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lZ7p8YLQ7QwN",
        "outputId": "109e3563-ad8b-4700-8ac0-d6a132e5e343"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                        0\n",
              "hosp_admittime            0\n",
              "hosp_dischtime            0\n",
              "icu_intime                0\n",
              "icu_outtime               0\n",
              "los_icu                   0\n",
              "icu_death                 0\n",
              "gender                    0\n",
              "race                      0\n",
              "admission_age             0\n",
              "weight_admit            612\n",
              "height                 9414\n",
              "admission_type            0\n",
              "first_careunit            0\n",
              "charlson_score            0\n",
              "atrial_fibrillation       0\n",
              "malignant_cancer          0\n",
              "chf                       0\n",
              "ckd                       0\n",
              "cld                       0\n",
              "copd                      0\n",
              "diabetes                  0\n",
              "hypertension              0\n",
              "ihd                       0\n",
              "stroke                    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "flat_features.hist()\n",
        "\n",
        "#MY : avoid overlapping by adding space\n",
        "plt.subplots_adjust(hspace=1.5, wspace = 1.5)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "Kl-wkP0j6zw1",
        "outputId": "37f46e53-ce0a-42ae-d031-3ee64dc93f12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flat_features.loc[:,['height','charlson_score','admission_age','weight_admit']].hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "UlsakWnj9_1-",
        "outputId": "290ca602-d435-453c-e9c1-6cad363e0c6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'height'}>,\n",
              "        <Axes: title={'center': 'charlson_score'}>],\n",
              "       [<Axes: title={'center': 'admission_age'}>,\n",
              "        <Axes: title={'center': 'weight_admit'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjYAAAGzCAYAAAA8I13DAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABylElEQVR4nO3deVxU9f4/8NeAzLA5bApIKuKSgruQMqm4IUhkbrfcUjSXq4GJ3Ktm1xS10iw1F9RumXRLb2pXrdSUccEVN5RUVNLCsBQoFVDRAZnP7w9/c76OgLIMzHB8PR8PHjKf8z5n3p+ZMx/fnDnnfBRCCAEiIiIiGbAydwJEREREpsLChoiIiGSDhQ0RERHJBgsbIiIikg0WNkRERCQbLGyIiIhINljYEBERkWywsCEiIiLZYGFDREREssHChsokNjYWCoUCf/31l0m2N2rUKDRq1KjC6zo6OpokDyIqWXx8PBQKBU6ePFktz9e9e3d07969Wp6L5I2FDclWfn4+YmNjkZiYaO5UiIiomtQydwL0bPrss8+g1+ur9Dny8/MxZ84cAOBfgkREzwgesSGzsLGxgUqlMncaRGRm+fn55k6hxrl79665U7BoLGyoXHJycjBq1Cg4OzvDyckJo0ePLjYwff311/D394ednR1cXV0xZMgQXL161SimpHNsbty4gREjRkCtVsPZ2RkRERH46aefoFAoEB8fXyyXP/74A/3794ejoyPq1q2Lf/7znygqKgIAXLlyBXXr1gUAzJkzBwqFAgqFArGxsSZ7LYhquj/++ANjxoyBl5cXVCoVfHx8MHHiRBQUFEgxOp0OMTExqFu3LhwcHDBgwAD8+eefRtv57rvvEB4eLm2nSZMmmDdvnvR5NOjevTtatWqF5ORkBAUFwd7eHu+8806p+S1fvhwtW7aEvb09XFxcEBAQgPXr1xvFnD59GmFhYVCr1XB0dESvXr1w9OhRoxjD+UKHDx9+al+e5vbt24iOjkajRo2gUqng7u6O3r1749SpU0Zxx44dw0svvQQXFxc4ODigTZs2WLp0qVHM3r170bVrVzg4OMDZ2Rn9+vXDhQsXjGIM5zeeP38ew4YNg4uLC7p06SItL8t4+6zhV1FULq+99hp8fHwwf/58nDp1Cp9//jnc3d3x4YcfAgDef/99vPvuu3jttdcwduxY/Pnnn1i+fDmCgoJw+vRpODs7l7hdvV6Pvn374vjx45g4cSJatGiB7777DhERESXGFxUVITQ0FJ06dcLHH3+M3bt3Y9GiRWjSpAkmTpyIunXrYtWqVZg4cSIGDBiAgQMHAgDatGlTJa8LUU1z7do1dOzYETk5ORg/fjxatGiBP/74A99++63RHyuTJk2Ci4sLZs+ejStXruCTTz5BVFQUNmzYIMXEx8fD0dERMTExcHR0xN69ezFr1izk5eXho48+MnreGzduICwsDEOGDMHrr78ODw+PEvP77LPP8NZbb+Fvf/sbJk+ejPv37+PMmTM4duwYhg0bBgBITU1F165doVarMW3aNNjY2ODTTz9F9+7dsX//fnTq1Mlom2Xpy9NMmDAB3377LaKiouDn54cbN27g0KFDuHDhAjp06AAA0Gq1ePnll1GvXj1MnjwZnp6euHDhArZt24bJkycDAHbv3o2wsDA0btwYsbGxuHfvHpYvX47OnTvj1KlTxf7we/XVV9GsWTN88MEHEEIAqPh4K3uCqAxmz54tAIg33njDqH3AgAHCzc1NCCHElStXhLW1tXj//feNYs6ePStq1apl1B4RESG8vb2lx//73/8EAPHJJ59IbUVFRaJnz54CgFi7dq3RugDE3LlzjZ6nffv2wt/fX3r8559/CgBi9uzZFe02kWyNHDlSWFlZiRMnThRbptfrxdq1awUAERwcLPR6vbRsypQpwtraWuTk5Eht+fn5xbbx97//Xdjb24v79+9Lbd26dRMAxOrVq4vFd+vWTXTr1k163K9fP9GyZcsn9qF///5CqVSKX375RWq7du2aqF27tggKCpLaytOXp3FychKRkZGlLn/w4IHw8fER3t7e4tatW0bLHn3udu3aCXd3d3Hjxg2p7aeffhJWVlZi5MiRUpth7B06dKjRtsoz3j5r+FUUlcuECROMHnft2hU3btxAXl4eNm/eDL1ej9deew1//fWX9OPp6YlmzZph3759pW53586dsLGxwbhx46Q2KysrREZGliuXX3/9tYI9I3p26PV6bN26FX379kVAQECx5QqFQvp9/PjxRo+7du2KoqIi/Pbbb1KbnZ2d9Pvt27fx119/oWvXrsjPz8fFixeNtq1SqTB69Oin5ujs7Izff/8dJ06cKHF5UVEREhIS0L9/fzRu3Fhqr1evHoYNG4ZDhw4hLy/PaJ2y9KUseR07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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flat_features.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "q6dJ8_qT77h2",
        "outputId": "2b8f6d52-b68e-44b8-a495-8c28f1832034"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         id gender                    race  admission_age  weight_admit  \\\n",
              "0  24099382      M                   OTHER      58.441631          92.0   \n",
              "1  27824879      F                   WHITE      79.748598          55.0   \n",
              "2  27146619      F                   WHITE      81.717397          59.0   \n",
              "3  22476441      F  BLACK/AFRICAN AMERICAN      63.769278          73.6   \n",
              "4  23169158      F                   WHITE      84.191979          79.1   \n",
              "\n",
              "   height     admission_type  \\\n",
              "0   170.0           ELECTIVE   \n",
              "1     NaN           EW EMER.   \n",
              "2     NaN           EW EMER.   \n",
              "3   160.0           EW EMER.   \n",
              "4   160.0  OBSERVATION ADMIT   \n",
              "\n",
              "                                     first_careunit  charlson_score  \\\n",
              "0                               Trauma SICU (TSICU)              11   \n",
              "1                               Trauma SICU (TSICU)               5   \n",
              "2  Medical/Surgical Intensive Care Unit (MICU/SICU)               8   \n",
              "3  Medical/Surgical Intensive Care Unit (MICU/SICU)               8   \n",
              "4  Medical/Surgical Intensive Care Unit (MICU/SICU)               6   \n",
              "\n",
              "   atrial_fibrillation  malignant_cancer  chf  ckd  cld  copd  diabetes  \\\n",
              "0                    0                 0    0    0    0     1         1   \n",
              "1                    0                 0    0    0    0     1         0   \n",
              "2                    0                 0    1    1    0     0         0   \n",
              "3                    0                 0    1    1    0     1         1   \n",
              "4                    1                 0    1    1    0     0         1   \n",
              "\n",
              "   hypertension  ihd  stroke  \n",
              "0             1    0       0  \n",
              "1             1    1       0  \n",
              "2             0    1       0  \n",
              "3             1    1       0  \n",
              "4             1    0       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-109a103f-44c1-4603-ad7f-107a1bc50742\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>gender</th>\n",
              "      <th>race</th>\n",
              "      <th>admission_age</th>\n",
              "      <th>weight_admit</th>\n",
              "      <th>height</th>\n",
              "      <th>admission_type</th>\n",
              "      <th>first_careunit</th>\n",
              "      <th>charlson_score</th>\n",
              "      <th>atrial_fibrillation</th>\n",
              "      <th>malignant_cancer</th>\n",
              "      <th>chf</th>\n",
              "      <th>ckd</th>\n",
              "      <th>cld</th>\n",
              "      <th>copd</th>\n",
              "      <th>diabetes</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>ihd</th>\n",
              "      <th>stroke</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24099382</td>\n",
              "      <td>M</td>\n",
              "      <td>OTHER</td>\n",
              "      <td>58.441631</td>\n",
              "      <td>92.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>ELECTIVE</td>\n",
              "      <td>Trauma SICU (TSICU)</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>27824879</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>79.748598</td>\n",
              "      <td>55.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Trauma SICU (TSICU)</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>27146619</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>81.717397</td>\n",
              "      <td>59.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>22476441</td>\n",
              "      <td>F</td>\n",
              "      <td>BLACK/AFRICAN AMERICAN</td>\n",
              "      <td>63.769278</td>\n",
              "      <td>73.6</td>\n",
              "      <td>160.0</td>\n",
              "      <td>EW EMER.</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23169158</td>\n",
              "      <td>F</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>84.191979</td>\n",
              "      <td>79.1</td>\n",
              "      <td>160.0</td>\n",
              "      <td>OBSERVATION ADMIT</td>\n",
              "      <td>Medical/Surgical Intensive Care Unit (MICU/SICU)</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-109a103f-44c1-4603-ad7f-107a1bc50742')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-109a103f-44c1-4603-ad7f-107a1bc50742 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-109a103f-44c1-4603-ad7f-107a1bc50742');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-595a266e-542d-4f59-b8b9-3238e3ec6b1e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-595a266e-542d-4f59-b8b9-3238e3ec6b1e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-595a266e-542d-4f59-b8b9-3238e3ec6b1e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "flat_features",
              "summary": "{\n  \"name\": \"flat_features\",\n  \"rows\": 20414,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2871873,\n        \"min\": 20001305,\n        \"max\": 29999625,\n        \"num_unique_values\": 20414,\n        \"samples\": [\n          21796125,\n          21921090,\n          28383836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"HISPANIC/LATINO - MEXICAN\",\n          \"HISPANIC OR LATINO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"admission_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.588894601370207,\n        \"min\": 18.00952755,\n        \"max\": 100.0584215,\n        \"num_unique_values\": 20404,\n        \"samples\": [\n          72.74748006,\n          69.42033965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight_admit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.316987057716904,\n        \"min\": 1.0,\n        \"max\": 1010.0,\n        \"num_unique_values\": 1351,\n        \"samples\": [\n          97.8,\n          63.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.813323969850883,\n        \"min\": 122.0,\n        \"max\": 208.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          175.0,\n          166.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"admission_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"EW EMER.\",\n          \"DIRECT EMER.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"first_careunit\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Neuro Stepdown\",\n          \"Medical/Surgical Intensive Care Unit (MICU/SICU)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charlson_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 19,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          11,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atrial_fibrillation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"malignant_cancer\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chf\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ckd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cld\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"copd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ihd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stroke\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_flat(flat):\n",
        "\n",
        "    # make naming consistent with the other tables\n",
        "    flat.rename(columns={'id': 'patient'}, inplace=True)\n",
        "    flat.set_index('patient', inplace=True)\n",
        "\n",
        "    # cleaning categorical data:\n",
        "    # gender:\n",
        "    flat['gender'].replace({'M': 1, 'F': 0}, inplace=True)\n",
        "\n",
        "    #race:\n",
        "    #create list of categories\n",
        "    race_categories = ['race_ai_an_pi', #\"AMERICAN INDIAN/ALASKA NATIVE/PACIFIC ISLANDER\"\n",
        "                      'race_asian', #\"ASIAN\"\n",
        "                      'race_black_aa', #\"BLACK/AFRICAN AMERICAN\"\n",
        "                      'race_hisp_latino', #\"HISPANIC/LATINO\"\n",
        "                      'race_multiple', #\"MULTIPLE\"\n",
        "                      'race_white'] #\"WHITE\"\n",
        "\n",
        "    #associated static values\n",
        "    amer_indian = \"AMERICAN INDIAN/ALASKA NATIVE|NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER\"\n",
        "    asian = \"ASIAN\"\n",
        "    black_aa = \"BLACK/AFRICAN|BLACK/AFRICAN AMERICAN|BLACK/CAPE VERDEAN|BLACK/CARIBBEAN ISLAND\"\n",
        "    hisp = \"HISPANIC OR LATINO|HISPANIC/LATINO|SOUTH AMERICAN\"\n",
        "    mult = \"MULTIPLE RACE/ETHNICITY\"\n",
        "    white = \"WHITE\"\n",
        "\n",
        "\n",
        "    conditions = [\n",
        "        (flat[\"race\"].str.contains(amer_indian)),\n",
        "        (flat[\"race\"].str.contains(asian)),\n",
        "        (flat[\"race\"].str.contains(black_aa)),\n",
        "        (flat[\"race\"].str.contains(hisp)),\n",
        "        (flat[\"race\"].str.contains(mult)),\n",
        "        (flat[\"race\"].str.contains(white))\n",
        "    ]\n",
        "\n",
        "    flat[\"race_clean\"] = np.select(conditions, race_categories, default=\"unk_oth\") #fill rest in with unknown/other\n",
        "\n",
        "    # admission type:\n",
        "    elective_list = [\"ELECTIVE\", \"SURGICAL SAME DAY ADMISSION\"]\n",
        "\n",
        "    flat[\"admission_type_clean\"] = [\"elective\" if x in elective_list else \"emergency\" for x in flat[\"admission_type\"]]\n",
        "\n",
        "    # first care unit\n",
        "    #we could combine all three neuro ones together. Not ideal but they're tiny:\n",
        "    icu_categories = [\"NEUROICU\", #don't use NICU b/c that is neonatal ICU\n",
        "                  \"MICU_SICU\",\n",
        "                  \"TSICU\",\n",
        "                  \"MICU\",\n",
        "                  \"SICU\",\n",
        "                  \"CCU\",\n",
        "                  \"CVICU\"\n",
        "                ]\n",
        "\n",
        "    #associated raw_static values\n",
        "    NEUROICU = \"Neuro\" #put first otherwise SICU is picked up and Neuro SICU is mismapped\n",
        "    MICU_SICU = \"(MICU/SICU)\" #put first\n",
        "    TSICU = \"(TSICU)\" #put first\n",
        "    MICU = \"(MICU)\"\n",
        "    SICU = \"(SICU)\"\n",
        "    CCU = \"(CCU)\"\n",
        "    CVICU = \"(CVICU)\"\n",
        "\n",
        "\n",
        "    conditions = [\n",
        "        (flat[\"first_careunit\"].str.contains(NEUROICU)),\n",
        "        (flat[\"first_careunit\"].str.contains(MICU_SICU)),\n",
        "        (flat[\"first_careunit\"].str.contains(TSICU)),\n",
        "        (flat[\"first_careunit\"].str.contains(MICU)),\n",
        "        (flat[\"first_careunit\"].str.contains(SICU)),\n",
        "        (flat[\"first_careunit\"].str.contains(CCU)),\n",
        "        (flat[\"first_careunit\"].str.contains(CVICU))\n",
        "    ]\n",
        "\n",
        "    #apply\n",
        "    flat[\"first_careunit_clean\"] = np.select(conditions, icu_categories, default=\"UNKOTH\") #fill rest in with unknown/other\n",
        "\n",
        "\n",
        "    flat.drop(columns=['race','first_careunit','admission_type'], inplace=True)\n",
        "\n",
        "    cat_features=['race','first_careunit','admission_type']\n",
        "    col_replace = ['race_clean', 'first_careunit_clean', 'admission_type_clean']\n",
        "\n",
        "    flat.rename(columns={i:j for i,j in zip(col_replace,cat_features)}, inplace=True)\n",
        "\n",
        "    # convert the categorical features to one-hot\n",
        "    flat = pd.get_dummies(flat, columns=cat_features, dtype=int)\n",
        "\n",
        "    # standardisation is for features that are probably normally distributed\n",
        "    features_for_standardisation = ['height','charlson_score','weight_admit', 'admission_age']\n",
        "    means = flat[features_for_standardisation].mean(axis=0)\n",
        "    stds = flat[features_for_standardisation].std(axis=0)\n",
        "    flat[features_for_standardisation] = (flat[features_for_standardisation] - means) / stds\n",
        "\n",
        "    # we then need to make sure that ridiculous outliers are clipped to something sensible\n",
        "    flat[features_for_standardisation] = flat[features_for_standardisation].clip(lower=-3, upper=3)  # room for +- 3 on each side of the normal range\n",
        "\n",
        "    # fill in the NaNs\n",
        "    # these are mainly found in height\n",
        "    flat['weight_admit'].fillna(0, inplace=True)\n",
        "    flat['height'].fillna(0, inplace=True)\n",
        "\n",
        "    flat.sort_index(inplace=True)\n",
        "\n",
        "    return flat\n",
        "\n",
        "\n",
        "flat_pre = preprocess_flat(flat_features)\n"
      ],
      "metadata": {
        "id": "nCcNSIwM7S3v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "flat_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "i_iQYZPTILCu",
        "outputId": "6782cc40-6a66-4797-df68-08db35594b40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          gender  admission_age  weight_admit    height  charlson_score  \\\n",
              "patient                                                                   \n",
              "20001305       0       1.093628     -1.464727 -1.335937        2.130287   \n",
              "20001361       1      -2.363275      0.583513  1.253461       -1.986889   \n",
              "20001770       0      -2.059891     -0.779626  0.000000       -0.957595   \n",
              "20002506       1      -2.756136     -0.899696  0.000000       -0.957595   \n",
              "20003425       1       0.601206     -0.451202  0.000000        2.130287   \n",
              "\n",
              "          atrial_fibrillation  malignant_cancer  chf  ckd  cld  ...  \\\n",
              "patient                                                         ...   \n",
              "20001305                    0                 0    0    0    0  ...   \n",
              "20001361                    0                 0    0    0    0  ...   \n",
              "20001770                    0                 0    0    0    0  ...   \n",
              "20002506                    0                 0    0    0    0  ...   \n",
              "20003425                    0                 1    0    0    0  ...   \n",
              "\n",
              "          race_unk_oth  first_careunit_CCU  first_careunit_CVICU  \\\n",
              "patient                                                            \n",
              "20001305             0                   0                     0   \n",
              "20001361             0                   0                     0   \n",
              "20001770             0                   0                     0   \n",
              "20002506             1                   0                     0   \n",
              "20003425             0                   0                     0   \n",
              "\n",
              "          first_careunit_MICU  first_careunit_MICU_SICU  \\\n",
              "patient                                                   \n",
              "20001305                    0                         1   \n",
              "20001361                    0                         1   \n",
              "20001770                    0                         0   \n",
              "20002506                    0                         0   \n",
              "20003425                    0                         0   \n",
              "\n",
              "          first_careunit_NEUROICU  first_careunit_SICU  first_careunit_TSICU  \\\n",
              "patient                                                                        \n",
              "20001305                        0                    0                     0   \n",
              "20001361                        0                    0                     0   \n",
              "20001770                        0                    1                     0   \n",
              "20002506                        1                    0                     0   \n",
              "20003425                        0                    1                     0   \n",
              "\n",
              "          admission_type_elective  admission_type_emergency  \n",
              "patient                                                      \n",
              "20001305                        0                         1  \n",
              "20001361                        0                         1  \n",
              "20001770                        0                         1  \n",
              "20002506                        0                         1  \n",
              "20003425                        0                         1  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b490a585-3ce7-4f0b-891c-d67afebc1db7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>admission_age</th>\n",
              "      <th>weight_admit</th>\n",
              "      <th>height</th>\n",
              "      <th>charlson_score</th>\n",
              "      <th>atrial_fibrillation</th>\n",
              "      <th>malignant_cancer</th>\n",
              "      <th>chf</th>\n",
              "      <th>ckd</th>\n",
              "      <th>cld</th>\n",
              "      <th>...</th>\n",
              "      <th>race_unk_oth</th>\n",
              "      <th>first_careunit_CCU</th>\n",
              "      <th>first_careunit_CVICU</th>\n",
              "      <th>first_careunit_MICU</th>\n",
              "      <th>first_careunit_MICU_SICU</th>\n",
              "      <th>first_careunit_NEUROICU</th>\n",
              "      <th>first_careunit_SICU</th>\n",
              "      <th>first_careunit_TSICU</th>\n",
              "      <th>admission_type_elective</th>\n",
              "      <th>admission_type_emergency</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>patient</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20001305</th>\n",
              "      <td>0</td>\n",
              "      <td>1.093628</td>\n",
              "      <td>-1.464727</td>\n",
              "      <td>-1.335937</td>\n",
              "      <td>2.130287</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20001361</th>\n",
              "      <td>1</td>\n",
              "      <td>-2.363275</td>\n",
              "      <td>0.583513</td>\n",
              "      <td>1.253461</td>\n",
              "      <td>-1.986889</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20001770</th>\n",
              "      <td>0</td>\n",
              "      <td>-2.059891</td>\n",
              "      <td>-0.779626</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.957595</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20002506</th>\n",
              "      <td>1</td>\n",
              "      <td>-2.756136</td>\n",
              "      <td>-0.899696</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.957595</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20003425</th>\n",
              "      <td>1</td>\n",
              "      <td>0.601206</td>\n",
              "      <td>-0.451202</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.130287</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b490a585-3ce7-4f0b-891c-d67afebc1db7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b490a585-3ce7-4f0b-891c-d67afebc1db7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b490a585-3ce7-4f0b-891c-d67afebc1db7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2183643c-43d8-41b5-8564-f42c210be302\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2183643c-43d8-41b5-8564-f42c210be302')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2183643c-43d8-41b5-8564-f42c210be302 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "flat_pre"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flat_pre[['admission_age', 'weight_admit', 'height', 'charlson_score']].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "UOPpIFH8Tjfu",
        "outputId": "2307ae7b-3524-4788-d13f-76e8437ecc3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       admission_age  weight_admit        height  charlson_score\n",
              "count   20414.000000  20414.000000  20414.000000    20414.000000\n",
              "mean        0.000099     -0.015752      0.000913       -0.001213\n",
              "std         0.999697      0.854862      0.729292        0.995990\n",
              "min        -3.000000     -2.983251     -3.000000       -1.986889\n",
              "25%        -0.630030     -0.603054     -0.133717       -0.614497\n",
              "50%         0.083726     -0.115714      0.000000        0.071699\n",
              "75%         0.751795      0.435192      0.051240        0.757895\n",
              "max         2.109136      3.000000      3.000000        3.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0549c8e2-9101-45d3-855a-ea841a41e0f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>admission_age</th>\n",
              "      <th>weight_admit</th>\n",
              "      <th>height</th>\n",
              "      <th>charlson_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>20414.000000</td>\n",
              "      <td>20414.000000</td>\n",
              "      <td>20414.000000</td>\n",
              "      <td>20414.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.000099</td>\n",
              "      <td>-0.015752</td>\n",
              "      <td>0.000913</td>\n",
              "      <td>-0.001213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.999697</td>\n",
              "      <td>0.854862</td>\n",
              "      <td>0.729292</td>\n",
              "      <td>0.995990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-3.000000</td>\n",
              "      <td>-2.983251</td>\n",
              "      <td>-3.000000</td>\n",
              "      <td>-1.986889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-0.630030</td>\n",
              "      <td>-0.603054</td>\n",
              "      <td>-0.133717</td>\n",
              "      <td>-0.614497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.083726</td>\n",
              "      <td>-0.115714</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.071699</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.751795</td>\n",
              "      <td>0.435192</td>\n",
              "      <td>0.051240</td>\n",
              "      <td>0.757895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.109136</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0549c8e2-9101-45d3-855a-ea841a41e0f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0549c8e2-9101-45d3-855a-ea841a41e0f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0549c8e2-9101-45d3-855a-ea841a41e0f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d546f4e0-0d1a-4df3-be42-61874e86867d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d546f4e0-0d1a-4df3-be42-61874e86867d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d546f4e0-0d1a-4df3-be42-61874e86867d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"flat_pre[['admission_age', 'weight_admit', 'height', 'charlson_score']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"admission_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7217.423187214645,\n        \"min\": -3.0,\n        \"max\": 20414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.933148418442133e-05,\n          0.08372622875148918,\n          20414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight_admit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7217.4102004151355,\n        \"min\": -2.983250613885827,\n        \"max\": 20414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.015752463756755118,\n          -0.11571390051675763,\n          20414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7217.406383327255,\n        \"min\": -3.0,\n        \"max\": 20414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0009134491262655423,\n          0.0,\n          20414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charlson_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7217.326778373094,\n        \"min\": -1.9868894527650696,\n        \"max\": 20414.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.0012128407805921245,\n          0.07169864492290348,\n          20414.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labels = static.iloc[:,[0,5,6]]"
      ],
      "metadata": {
        "id": "zyOUz5uNCBEm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labels['los_icu'].hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "TE36dLFp-HTK",
        "outputId": "f164aea6-cb6d-4085-f22c-50384c1071b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Quantiles for LOS\n",
        "labels['los_icu'].quantile(q=[0.25, 0.5, 0.75, 0.9, 0.95, 0.99])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5koW7tYJ-YLW",
        "outputId": "5ef5361c-35fe-4888-e323-8f6a0d8d4ffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.25     1.8000\n",
              "0.50     2.8800\n",
              "0.75     5.2800\n",
              "0.90    10.5700\n",
              "0.95    15.3470\n",
              "0.99    30.7292\n",
              "Name: los_icu, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_labels(labels):\n",
        "\n",
        "    # make naming consistent with the other tables\n",
        "    labels.rename(columns={'id': 'patient'}, inplace=True)\n",
        "    labels.set_index('patient', inplace=True)\n",
        "\n",
        "    #removing LOS above 99% qunatile\n",
        "    print('max los before removing:',labels.los_icu.max() )\n",
        "    labels = labels[labels.los_icu < labels.los_icu.quantile(.99)].copy()\n",
        "\n",
        "    print('max los after removing above 99% quantile:',labels.los_icu.max() )\n",
        "\n",
        "    labels.sort_index(inplace=True)\n",
        "\n",
        "    return labels\n",
        "\n",
        "labels_pre = preprocess_labels(labels)"
      ],
      "metadata": {
        "id": "yAzZfDG2CWfP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labels_pre.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "tVu_3cTxLsY-",
        "outputId": "da22baad-6c3a-42e6-d919-0286cddf98f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          los_icu  icu_death\n",
              "patient                     \n",
              "20001305     2.78          1\n",
              "20001361     6.05          0\n",
              "20001770     2.87          0\n",
              "20002506     6.56          0\n",
              "20003425     4.00          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77df1112-cee8-41ee-97ba-250b1f3cb937\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>los_icu</th>\n",
              "      <th>icu_death</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>patient</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20001305</th>\n",
              "      <td>2.78</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20001361</th>\n",
              "      <td>6.05</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20001770</th>\n",
              "      <td>2.87</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20002506</th>\n",
              "      <td>6.56</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20003425</th>\n",
              "      <td>4.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77df1112-cee8-41ee-97ba-250b1f3cb937')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-77df1112-cee8-41ee-97ba-250b1f3cb937 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-77df1112-cee8-41ee-97ba-250b1f3cb937');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d98c74ec-e677-43ac-84d6-06a1fb4047da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d98c74ec-e677-43ac-84d6-06a1fb4047da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d98c74ec-e677-43ac-84d6-06a1fb4047da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "labels_pre",
              "summary": "{\n  \"name\": \"labels_pre\",\n  \"rows\": 20209,\n  \"fields\": [\n    {\n      \"column\": \"patient\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2871735,\n        \"min\": 20001305,\n        \"max\": 29999625,\n        \"num_unique_values\": 20209,\n        \"samples\": [\n          21161964,\n          23841256,\n          27824945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"los_icu\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.5061336301173345,\n        \"min\": 1.0,\n        \"max\": 30.59,\n        \"num_unique_values\": 1963,\n        \"samples\": [\n          10.31,\n          5.96,\n          21.65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"icu_death\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Saving processed data"
      ],
      "metadata": {
        "id": "TD_3JLWxtupz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "save_path = '/content/gdrive/My Drive/Colab Notebooks/SHP6004/TeamShare/ProcessedData/'\n",
        "flat_pre.to_csv(save_path + 'preprocessed_staticFeatures_SB.csv')\n",
        "labels_pre.to_csv(save_path + 'preprocessed_labels_SB.csv')"
      ],
      "metadata": {
        "id": "xpuGKFrSLV0b"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}